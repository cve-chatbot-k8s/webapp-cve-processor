package processor

import (
	"archive/zip"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"webapp/internal/database"
	"webapp/internal/models"
)

type Processor struct {
	db database.Service
}

func NewProcessor() *Processor {
	return &Processor{
		db: database.New(),
	}
}

func (p *Processor) DownloadCVERecords() {
	url := os.Getenv("CVE_URL")
	if url == "" {
		url = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	}

	zipFilePath := os.Getenv("ZIP_FILE_PATH")
	if zipFilePath == "" {
		zipFilePath = "internal/data/cvelistV5.zip"
	}

	unzipDir := os.Getenv("UNZIP_DIR")
	if unzipDir == "" {
		unzipDir = "internal/data"
	}

	cveDir := os.Getenv("CVE_DIR")
	if cveDir == "" {
		cveDir = "internal/data/cvelistV5-main"
	}
	// Check if the directory already exists
	if _, err := os.Stat(cveDir); !os.IsNotExist(err) {
		log.Println("CVE records already downloaded.")
		return
	}

	// Download the CVE Records
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("Unable to download the CVE records with error : %f", err.Error())
		return
	}
	defer resp.Body.Close()

	// Ensure the directory exists
	dir := filepath.Dir(zipFilePath)
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		err := os.MkdirAll(dir, 0755)
		if err != nil {
			log.Fatalf("Unable to create directory: %s", err)
			return
		}
	}

	// Create a new file
	out, err := os.Create(zipFilePath)
	if err != nil {
		panic(err)
	}
	defer out.Close()

	// Write the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		panic(err)
	}

	// Open the zip file
	r, err := zip.OpenReader(zipFilePath)
	if err != nil {
		panic(err)
	}
	defer r.Close()

	// Unzip the file
	for _, f := range r.File {
		fpath := filepath.Join(unzipDir, f.Name)

		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			panic(err)
		}

		outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			panic(err)
		}

		rc, err := f.Open()
		if err != nil {
			panic(err)
		}

		_, err = io.Copy(outFile, rc)

		outFile.Close()
		rc.Close()

		if err != nil {
			panic(err)
		}
	}
}

type DataPath struct {
	Path string
	Data []byte
}

func (p *Processor) ReadRecords() error {
	cveDir := os.Getenv("CVE_DIR")
	if cveDir == "" {
		cveDir = "internal/data/cvelistV5-main"
	}
	// Creating a buffered channel
	dataCh := make(chan DataPath, 100)
	var wg sync.WaitGroup

	go func() {
		for d := range dataCh {
			err := p.CreateRecord(d.Data, d.Path)
			if err != nil {
				log.Printf("error creating record: %v\n", err)
			}
		}
	}()

	// Walk the file tree
	err := filepath.Walk(cveDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Check if the file has a .json extension
		if !info.IsDir() && strings.HasSuffix(info.Name(), ".json") && strings.HasPrefix(info.Name(), "CVE") {
			wg.Add(1)

			go func(path string) {
				defer wg.Done()
				data, err := os.ReadFile(path)
				if err != nil {
					log.Printf("error reading file: %v\n", err)
					return
				}
				dataCh <- DataPath{Data: data, Path: path}
			}(path)
		}
		return nil
	})

	if err != nil {
		log.Printf("error walking the path %v: %v\n", cveDir, err)
	}

	wg.Wait()
	close(dataCh)

	return nil
}

func (p *Processor) CreateRecord(data []byte, path string) error {
	var record models.CveRecord
	err := json.Unmarshal(data, &record)
	if err != nil {
		fmt.Printf("error unmarshalling data from file %s: %v\n", path, err)
	}

	err = p.db.InsertCVE(record.CveMetadata.CveID, record.CveMetadata.DatePublished, record.CveMetadata.DateUpdated, data)
	if err != nil {
		log.Println("Error inserting data in database: ", err.Error())
	}

	return nil
}
