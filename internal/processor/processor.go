package processor

import (
	"archive/zip"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"webapp/internal/kafka"

	_ "github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

type Processor struct {
	producer kafka.Service
	counter  int64
}

func NewProcessor(producer kafka.Service) *Processor {
	return &Processor{
		producer: producer,
	}
}

func (p *Processor) DownloadCVERecords() {
	log.Print("Downloading CVE records")
	url := os.Getenv("CVE_URL")
	if url == "" {
		url = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	}

	zipFilePath := os.Getenv("ZIP_FILE_PATH")
	if zipFilePath == "" {
		zipFilePath = "internal/data/cvelistV5.zip"
	}

	unzipDir := os.Getenv("UNZIP_DIR")
	if unzipDir == "" {
		unzipDir = "internal/data"
	}

	cveDir := os.Getenv("CVE_DIR")
	if cveDir == "" {
		cveDir = "internal/data/cvelistV5-main"
	}
	// Check if the directory already exists
	if _, err := os.Stat(cveDir); !os.IsNotExist(err) {
		log.Print("CVE records already downloaded.")
		return
	}

	// Download the CVE Records
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal().Msgf("Unable to download the CVE records with error : %f", err.Error())
		return
	}
	defer resp.Body.Close()

	// Ensure the directory exists
	dir := filepath.Dir(zipFilePath)
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		err := os.MkdirAll(dir, 0755)
		if err != nil {
			log.Fatal().Msgf("Unable to create directory: %s", err)
			return
		}
	}

	// Create a new file
	out, err := os.Create(zipFilePath)
	if err != nil {
		panic(err)
	}
	defer out.Close()

	// Write the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		panic(err)
	}

	// Open the zip file
	r, err := zip.OpenReader(zipFilePath)
	if err != nil {
		panic(err)
	}
	defer r.Close()

	// Unzip the file
	for _, f := range r.File {
		fpath := filepath.Join(unzipDir, f.Name)

		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			panic(err)
		}

		outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			panic(err)
		}

		rc, err := f.Open()
		if err != nil {
			panic(err)
		}

		_, err = io.Copy(outFile, rc)

		outFile.Close()
		rc.Close()

		if err != nil {
			panic(err)
		}
	}
}

type DataPartition struct {
	Partition int32
	Data      []byte
}

func (p *Processor) ReadRecords() error {
	cveDir := os.Getenv("CVE_DIR")
	if cveDir == "" {
		cveDir = "internal/data/cvelistV5-main"
	}

	dataChan := make(chan DataPartition, 500)
	partitionCount := 10
	wg := sync.WaitGroup{}

	go func(producer kafka.Service) {
		for data := range dataChan {
			err := producer.ProduceCveRecord("cve", data.Data, strconv.FormatInt(atomic.AddInt64(&p.counter, 1), 10), data.Partition)
			if err != nil {
				log.Error().Msgf("error producing record: %v", err)
			}
			wg.Done()
		}
	}(p.producer)

	counter := 0
	err := filepath.Walk(cveDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && strings.HasSuffix(info.Name(), ".json") && strings.HasPrefix(info.Name(), "CVE") {
			data, err := os.ReadFile(path)
			if err != nil {
				log.Printf("error reading file: %v\n", err)
				return err
			}
			partition := int32(counter % partitionCount)
			wg.Add(1)
			dataChan <- DataPartition{
				Partition: partition,
				Data:      data,
			}
			counter++
		}
		return nil
	})

	if err != nil {
		log.Printf("error walking the path %v: %v\n", cveDir, err)
	}

	// Ensure all data has been sent to the channel before closing it
	close(dataChan)
	// Wait for all goroutines to finish processing the data
	wg.Wait()

	return nil
}

func (p *Processor) ProduceRecord(producer kafka.Service, data []byte, partition int32) error {
	id := atomic.AddInt64(&p.counter, 1)
	topic := os.Getenv("KAFKA_TOPIC")
	producer.ProduceCveRecord(topic, data, strconv.FormatInt(id, 10), partition)

	//log.Info().Msgf("Produced record with id: %v", id)
	return nil
}
