package kafka

import (
	"github.com/IBM/sarama"
	"github.com/rs/zerolog/log"
	"time"
)

type Service interface {
	ProduceCveRecord(topic string, value []byte, key string, partition int32)
}

type Producer struct {
	producer sarama.AsyncProducer
}

func NewProducer(brokers []string) (Producer, error) {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = true
	config.Producer.Return.Errors = true
	config.Producer.RequiredAcks = 0
	config.ChannelBufferSize = 1000
	config.Net.MaxOpenRequests = 100
	config.Producer.Flush.Frequency = 1 * time.Second

	producer, err := sarama.NewAsyncProducer(brokers, config)
	if err != nil {
		return Producer{
			producer: nil,
		}, err
	}

	// Start a new goroutine to read and log errors
	go func() {
		for err := range producer.Errors() {
			log.Error().Msgf("Failed to produce message: %v", err)
		}
	}()

	// Listen for SIGINT (Ctrl+C) signal
	//signals := make(chan os.Signal, 1)
	//signal.Notify(signals, os.Interrupt)
	//
	//go func() {
	//	<-signals
	//	producer.AsyncClose()
	//}()

	return Producer{
		producer: producer,
	}, nil
}

func (p *Producer) ProduceCveRecord(topic string, value []byte, key string, partition int32) {
	msg := &sarama.ProducerMessage{
		Topic:     topic,
		Partition: partition,
		Value:     sarama.ByteEncoder(value),
		Key:       sarama.ByteEncoder(key),
	}

	p.producer.Input() <- msg
}
