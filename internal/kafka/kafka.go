package kafka

import (
	"github.com/IBM/sarama"
	_ "github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type Service interface {
	ProduceCveRecord(topic string, value []byte, key string, partition int32) error
}

type Producer struct {
	producer sarama.SyncProducer
}

func NewProducer(brokers []string) (Producer, error) {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = true
	config.Producer.Return.Errors = true
	config.Producer.RequiredAcks = sarama.WaitForAll
	config.ChannelBufferSize = 10000
	config.Net.MaxOpenRequests = 250
	config.Metadata.AllowAutoTopicCreation = false
	config.Producer.Flush.Frequency = 20 * time.Millisecond

	producer, err := sarama.NewSyncProducer(brokers, config)
	if err != nil {
		return Producer{
			producer: nil,
		}, err
	}

	return Producer{
		producer: producer,
	}, nil
}

func (p *Producer) ProduceCveRecord(topic string, value []byte, key string, partition int32) error {
	msg := &sarama.ProducerMessage{
		Topic:     topic,
		Partition: partition,
		Value:     sarama.ByteEncoder(value),
		Key:       sarama.ByteEncoder(key),
	}

	_, _, err := p.producer.SendMessage(msg)
	if err != nil {
		log.Error().Msgf("Failed to send message: %v", err)
	}
	return err
}
